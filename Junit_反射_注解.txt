Junit测试类
	单独一个test包
	创建一个测试类XXXXXXTest
	写个测试方法public void testXXX（）
	加上注解@Test
	此时，注解报错，Alt + enter把junit加入到classpath
	
	断言
	Assert.assertEquals（3,result）
	
	两个注解@Before @After（每个测试方法的前后都执行）
	
	另外两个注解@BeforeClass @AfterClass（执行单个测试方法或者执行所有方法 都执行一次）
	
	
【反射】
	将类的各个组成部分组成部分封装成对象
	
	获取class对象的三种方式：
		1. class.forName("全类名")：将字节码文件加载进内存，返回class对象
			多用于配置文件，将类名定义在配置文件中。读取文件，加载类
		2. 类名.class：通过类名的class属性获取
			多用于参数的的传递
		3. 对象.getClass()：getClass()方法在object类中定义着
			多用于对象获取字节码的方式
	同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的class对象都是同一个
	
	class对象的功能：
		获取功能：
			1. 获取成员变量们
				Filed[] getFields（）方法只能获取所有public成员变量
				Filed getField（String name）方法只能获取指定名称的public成员变量
					Field对象常用的两个方法get（对象名）和set
					
				Filed[] getDeclaredFields（）方法获取所有成员变量(private也不例外)
					访问private变量时可能会报错，此时我们需要忽略访问权限修饰符的安全检查
					Field对象的方法还有setAccessible方法
						a.setAccessible(true); 【暴力反射】
			2. 获取构造方法们
				Constructor[] getConstructors()（括号里的参数用来区分是哪一个构造方法）
				Constructor[] getDeclaredConstructors()
					有个方法newInstance（构造方法的参数）
					setAccessible(true);
			3. 获取成员方法们
				Method有以下方法invoke（p，args）
					setAccessible(true);
					getName获取方法的名称
			4. 获取类名
				Class personClass = Person.class;
				personClass.getName()
			
		