【异常】
java.lang.Thorwable是java语言中所有错误和异常的超类
	下面是有Error和Exception类
	
java.lang.Throwable: 类是java语言中所有错误和异常的超类
    Exception： 编译期异常，进行编译Java程序时出现的问题
        RunTimeException：运行期异常，java运行期间出现了问题
        异常就相当于程序得了一个小毛病把异常处理掉，程序可以继续运行
    Error：错误
        错误就相当于程序得了无法医治的病，必须修改源代码，程序才能继续执行

使用Objects中的静态方法来判断是否为空
	public static <T> T requireNonNull(T obj) {
        if (obj == null)
            throw new NullPointerException();
        return obj;
    }
	
同时它还有重载的方法


throws关键字：异常处理的第一种方式，交给别人处理
作用：
    当方法内部抛出异常对象的时候，那么我们就必须处理这个异常对象
    可以使用throws关键字处理异常对象，会把异常对象声明抛出给方法的调用者处理（自己不处理，给别人处理），最终交给JVM处理--》中断处理
使用格式： 在方法声明时使用
    修饰符 返回值类型 方法名（参数列表） throws AAAException，BBBException{
        throw new AAAException（。。。）
        throw new BBBException（。。。）
        。。。
    }
    注意：
        1. throws关键字必须写在方法声明处
        2. throws关键字后边声明的异常必须是Exception或者是Exception子类
        3. 方法内部如果抛出了多个异常对象，那么throws后边必须也声明多个异常。
            如果跑出的多个异常有子父类关系，那么声明父类异常即可
        4. 调用一个声明抛出异常的方法，我们就必须处理声明的异常
            要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM
            要么try、、、catch自己处理异常
			

try...catch异常的处理的第二种方式，自己处理异常
格式：
    try{
        可能产生的异常代码
    }catch（定义一个异常变量，用来接收try抛出的异常对象）{
        异常的处理逻辑，产生异常之后，如何处理异常对象
        一般在工作当中，会把异常的消息记录到一个日志中
    }
    。。。catch（异常类名 变量名）{// try抛出什么异常对象，catch就定义什么异常变量，用来了接收这个异常对象

    }
    注意：
    1. try可能会抛出多个异常对象，那么可以使用多个catch来处理这些异常对象
    2. 如果try中产生了多个异常，那么就会执行catch中的异常处理逻辑，执行完毕catch中的处理逻辑，继续执行try...catch之后的代码
        如果try没有产生异常，那么catch不会执行catch中的异常的处理逻辑

从三个异常处理的方法开始不写。
getMessage
toString
printStackTrace

使用catch同时捕获多个异常的时候，子类异常须写在上面，否则报错

运行时异常被抛出可以不处理，既不捕获也不处理，交给JVM

如果finally有return语句，永远返回finally的结果，避免这种结果发生

子父类异常

自定义异常类

finally代码块
	一般用于资源释放和回收